on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

env:
  RUSTFLAGS: "-D warnings"

jobs:
  build:
    name: build 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        # Build for these versions to force backward compat with certain
        # toolchains (GLIBC < 2.29 in case of ubuntu-18.04)
        - ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
    - id: tag
      uses: dawidd6/action-get-tag@v1
    - run: cargo +nightly build --release --features telemetry
    - working-directory: target/release
      run: tar -czf synth.tar.gz synth
    - uses: actions/upload-artifact@v2
      with:
        name: synth-${{ steps.tag.outputs.tag }}-${{ matrix.os }}-x86_64
        path: target/release/synth.tar.gz

  build-windows:
    name: build-windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - id: tag
        uses: dawidd6/action-get-tag@v1
      - run: cargo +nightly build --release --features telemetry
      - uses: actions/upload-artifact@v2
        with:
          name: synth-${{ steps.tag.outputs.tag }}-windows-x86_64
          path: target/release/synth.exe

  release:
    name: release
    needs: [ build, build-windows ]
    runs-on: ubuntu-latest
    steps:
    - id: tag
      uses: dawidd6/action-get-tag@v1
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: ${{ steps.tag.outputs.tag }}
        draft: true
        prerelease: false
    - run: echo '${{ steps.create_release.outputs.upload_url }}' > upload_url
    - uses: actions/upload-artifact@v2
      with:
        name: upload_url
        path: ./upload_url

  upload-nix-installer:
    name: upload-nix-installer
    needs: [ release ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: upload_url
        path: ./
    - id: release
      run: echo "##[set-output name=upload_url;]$(cat upload_url)"
    - working-directory: tools/nix
      run: |
        cp install.nix default.nix
        sed -i \
            -e "s|master|$GITHUB_REF|g" \
            -e "s|HEAD|$GITHUB_SHA|g" \
            default.nix
        tar -cvf install-nix default.nix
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./tools/nix/install-nix
        asset_name: install-nix
        asset_content_type: application/octet-stream

  upload:
    name: upload
    needs: [ release ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - ubuntu-18.04
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: upload_url
        path: ./
    - id: release
      run: echo "##[set-output name=upload_url;]$(cat upload_url)"
    - id: tag
      uses: dawidd6/action-get-tag@v1
    - uses: actions/download-artifact@v2
      with:
        name: synth-${{ steps.tag.outputs.tag }}-${{ matrix.os }}-x86_64
        path: ./
    - run: ls
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./synth.tar.gz
        asset_name: synth-${{ matrix.os }}-x86_64.tar.gz
        asset_content_type: application/octet-stream

  upload-windows:
    name: upload-windows
    needs: [ release ]
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: upload_url
          path: ./
      - id: release
        run: echo "##[set-output name=upload_url;]$(cat upload_url)"
      - id: tag
        uses: dawidd6/action-get-tag@v1
      - uses: actions/download-artifact@v2
        with:
          name: synth-${{ steps.tag.outputs.tag }}-windows-x86_64
          path: ./
      - run: ls
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./synth.exe
          asset_name: synth-windows-latest-x86_64.exe
          asset_content_type: application/octet-stream
      - id: install-wix
        run: nuget install WiX -Version 3.11.2
      - id: install-cargo-wix
          cargo +nightly install cargo-wix
      - id: copy-target
        run: |
          mkdir synth/target
          mkdir synth/target/release
          copy target/release/synth.exe synth/target/release
      - id: wix
        run: |
          cd synth
          cargo wix
      - name: Upload Windows installer
        id: upload-windows-installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./synth/target/wix/synth-${{ steps.tag.outputs.tag }}-x86_64.msi
          asset_name: synth-windows-latest-x86_64.msi
          asset_content_type: application/octet-stream
